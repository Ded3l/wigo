#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";
use Wigo::Probe;
use IO::Socket;


###
# DEFAULT CONFIG
###

my $conf = { 
    'redisToCheck'          => [],
    'paramsToCheck'         => [
        "used_memory",
        "total_connections_received",
        "total_commands_processed",
        "pubsub_channels",
        "connected_clients",
    ],
};

init( config => $conf );

if ( ! config->{'redisToCheck'} or ref(config->{'redisToCheck'}) ne 'ARRAY' or scalar @{ config->{'redisToCheck'} } == 0 )
{
    message "no instance to monitor";
    exit 13;
}


# Checks
my $redisNotOk = 0;
my $msg = "";

foreach my $Redis ( @{config->{'redisToCheck'}} )
{
    my $buf;
    my ($Ip,$Port)  = split(":",$Redis);
    if(!$Port)
    {
        $Port = 6379;
    }

    my $Sock = IO::Socket::INET->new(
        PeerAddr  => $Ip,
        PeerPort  => $Port,
        Proto     => 'tcp'
    );
    if(!$Sock)
    {
        $redisNotOk++;
        detail->{ $Redis }->{'Status'}    = "NOK";
        detail->{ $Redis }->{'Message'}   = $!;
        $msg .= "Instance $Redis not ok : $!. ";
        next;
    }


    # Send command
    $Sock->send("INFO\r\n");


    # Read response
    eval
    {
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
        alarm 1;
        $Sock->recv( $buf , 10000 );
        alarm 0;
    };
    if ($@)
    {
        die unless $@ eq "alarm\n";
        $redisNotOk++;
        detail->{ $Redis }->{'Status'} = "Timeouted";
        $msg .= "Instance $Redis not ok : connection timeout. ";
        next;
    }
    else
    {
        detail->{ $Redis }->{'Status'} = "OK";
    }

    
    # Parse
    foreach my $line ( split("\n", $buf) )
    {
        if( $line =~ /^([^\:]+)\:([^\:\r]+)/ )
        {
            if( $1 eq 'redis_version' )
            {
                detail->{ $Redis }->{'Version'} = $2
            }
            elsif( grep { $1 eq $_ } @{ config->{'paramsToCheck'} } )
            {
                my $value = $2;
                add_metric { Value => $value + 0, Tags => { instance => $Redis, param => $1 } };
            }
            elsif( $line =~ /^(db\d+):keys=(\d+),expires=(\d+)/ )
            {
                my $keys    = $2;
                my $expires = $3;

                add_metric { Value => $keys + 0,    Tags => { instance => $Redis, db => $1, param => "keys" } };
                add_metric { Value => $expires + 0, Tags => { instance => $Redis, db => $1, param => "expires" } };
            }
        }
    }
}


if($redisNotOk && $redisNotOk > 0)
{
    raise 300 + $redisNotOk;
    message $msg
}
else
{
    raise 100;
    message "All redis instances are running";
}


output 0;
