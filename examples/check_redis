#!/usr/bin/perl

use strict;
use warnings;
use JSON::XS;
use IO::Socket;
my $coder  = JSON::XS->new->pretty;
my $return = { Status => 398, Message => "No results", Metrics => [] };


# Params
my $redisParamsToKeep   = [
    "used_memory",
    "total_connections_received",
    "total_commands_processed",
    "pubsub_channels",
    "connected_clients",
];
my $redisToCheck        = [
    { name => "Redis1", ip => "127.0.0.1" , port => 6379 },
];


# Checks
my $redisNotOk = 0;
my $msg = "";

foreach my $Redis ( @{ $redisToCheck } )
{
    my $buf;
    my $Ip      = $Redis->{'ip'};
    my $Port    = $Redis->{'port'} || 6379;
    my $IpPort  = $Ip . ":" . $Port;

    my $Sock = IO::Socket::INET->new(
        PeerAddr  => '127.0.0.1',
        PeerPort  => 6379,
        Proto     => 'tcp'
    );
    if(!$Sock)
    {
        $redisNotOk++;
        $return->{'Detail'}->{ $IpPort }->{'Status'}    = "NOK";
        $return->{'Detail'}->{ $IpPort }->{'Message'}   = $!;
        $msg .= "Instance $IpPort not ok : $!. ";
        next;
    }

    
    # Send command
    $Sock->send("INFO\r\n");


    # Read response
    eval
    {
        local $SIG{ALRM} = sub { die "alarm\n" }; # NB: \n required
        alarm 1;
        $Sock->recv( $buf , 10000 );
        alarm 0;
    };
    if ($@)
    {
        die unless $@ eq "alarm\n";
        $redisNotOk++;
        $return->{'Detail'}->{ $IpPort }->{'Status'} = "Timeouted";
        $msg .= "Instance $IpPort not ok : connection timeout. ";
        next;
    }
    else
    {
        $return->{'Detail'}->{ $IpPort }->{'Status'} = "OK";
    }

    
    # Parse
    foreach my $line ( split("\n", $buf) )
    {
        if( $line =~ /^([^\:]+)\:([^\:\r]+)/ )
        {
            if( $1 eq 'redis_version' )
            {
                $return->{'Detail'}->{ $IpPort }->{'Version'} = $2
            }
            elsif( grep { $1 eq $_ } @{ $redisParamsToKeep } )
            {
                my $value = $2;
                push @{ $return->{'Metrics'} }, { 
                    Value   => $value + 0, 
                    Tags    => { instance => $IpPort, param => $1 },
                };
            }
            elsif( $line =~ /^(db\d+):keys=(\d+),expires=(\d+)/ )
            {
                my $keys    = $2;
                my $expires = $3;

                push @{ $return->{'Metrics'} }, {
                    Value   => $keys + 0,
                    Tags    => { instance => $IpPort, db => $1, param => "keys" },
                };

                push @{ $return->{'Metrics'} }, {
                    Value   => $expires + 0,
                    Tags    => { instance => $IpPort, db => $1, param => "expires" },
                };
            }
        }
    }
}


if($redisNotOk && $redisNotOk > 0)
{
    $return->{'Status'}     = 300 + $redisNotOk;
    $return->{'Message'}    = $msg; 
}
else
{
    $return->{'Status'}     = 100 + $redisNotOk;
    $return->{'Message'}    = "All redis instances are running";
}


# Print result
print $coder->encode( $return );

