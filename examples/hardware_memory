#!/usr/bin/perl

use strict;
use warnings;


# Init Json
use JSON::XS;
my $coder = JSON::XS->new->pretty;


# Warn levels
my $warnLevel       = 75;
my $critLevel       = 90;
my $wantedFields    = ['SwapFree','SwapTotal','Cached','MemTotal','MemFree'];

my $return = {
    Version    => "0.10",
    
    Status     => 398,
    Message    => "No results",

    Metrics    => [],
};


# Exec
my @meminfo = `cat /proc/meminfo`;
if($? != 0)
{
    $return->{'Status'}     = 500;
    $return->{'Message'}    = "Error while cating /proc/meminfo: ". $!;
}
else
{
    my %values = map { chomp; $_ =~ /(.*):\s+(.*) [\w]+/ } @meminfo;
    foreach my $key ( keys %values )
    {
        if( grep { $_ eq $key } @{ $wantedFields } )
        {
            my $value   = $values{ $key } ? $values{ $key } + 0 : 0;
            my $Metric  = {
                Tags    => { type => $key },
                Value   => $value,
            };

            push @{ $return->{'Metrics'} }, $Metric;
        }
    }

    my $realFree         = $values{'MemFree'} + $values{'Cached'} + $values{'Buffers'};
    my $realUsed         = $values{'MemTotal'} - $realFree;
    my $usePercentage    = sprintf( "%.2f", $realUsed * 100 / $values{'MemTotal'});

    # Add MemUsed
    push @{ $return->{'Metrics'} }, {
        Tags    => { type => "MemUsed" },
        Value   => $realUsed,
    };

    push @{ $return->{'Metrics'} }, {
        Tags    => { type => "MemRealFree" },
        Value   => $realFree,
    };


    $return->{'Status'}  = 100;
    $return->{'Message'} = "Current memory usage is $usePercentage%";

    if($usePercentage > $critLevel)
    {
        $return->{'Status'} = 300;
    }
    elsif($usePercentage > $warnLevel)
    {
        $return->{'Status'} = 250;
    }
}


print $coder->encode( $return );

