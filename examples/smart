#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;

# Init Json
use JSON::XS;
my $coder = JSON::XS->new->pretty;

my $return = {
    Version     => "0.10",
    
    Status      => 100,
    Message     => "",

    Detail      => {},

    Metrics     => {},
};

###
# DEFAULT CONFIG
###

my $conf = {
    'smartctl' => '/usr/sbin/smartctl',
    'infos' => [
        'Device Model',
        'Serial Number',
        'User Capacity',
        'Sector Size'
    ],
    'attributes' => {
        "Raw_Read_Error_Rate"       => {},
        "Reallocated_Sector_Ct"     => {},
        "Seek_Error_Rate"           => {},
        "Power_On_Hours"            => {},
        "Spin_Retry_Count"          => {},
        "Temperature_Celsius"       => { "warn" => 45, "crit" => 50 },
        "Current_Pending_Sector"    => {},
        "Offline_Uncorrectable"     => {},
    }
};


###
# TEST SMARTCTL EXISTANCE
###
if( ! -e $conf->{'smartctl'} )
{
    exit 13;
}


###
# OVERRIDE CONFIG
###

if ( -r '/etc/wigo/conf.d/smart.conf' )
{
    if ( ! open JSON_CONFIG, '<', '/etc/wigo/conf.d/smart.conf' )
    {
        $return->{'Status'}     = 500;
                $return->{'Message'}    = "Error while opening json config file for read : " . $!;
                print $coder->encode($return);
        exit 13;
    }

    my $json = join '', (<JSON_CONFIG>);
    close JSON_CONFIG;
    
    eval {
        $conf = decode_json( $json );
    };

    if ( $@ )
    {
        $return->{'Status'}     = 500;
            $return->{'Message'}    = "Error while decoding json config: " . $@;
            print $coder->encode($return);
        exit 13;
    }
}

###
# GET DIST LIST
###

if ( ! open PART_LIST, '<', '/proc/partitions' )
{
    $return->{'Status'}     = 500;
    $return->{'Message'}    = "Error while fetching disk list: " . $!;

    print $coder->encode($return);
    exit 0;
}
my @part_list = <PART_LIST>;
close PART_LIST;

my @disks;
foreach my $line ( @part_list )
{
    if ( $line =~ /.*(sd[a-z])$/ )
    {
        push @disks, $1;
    } 
}

###
# SMART TESTS
###

my $details = {};
my @metrics;
foreach my $disk ( @disks )
{
    my $smartctl = $conf->{'smartctl'};
    my @smart = split "\n", `$smartctl -x /dev/$disk`;

    foreach my $line ( @smart )
    {
        foreach my $info ( @{$conf->{'infos'}} )
        {
            if ( $line =~ /^$info:\s+(.*)$/ )
            {
                $details->{$disk}->{$info} = $1;
            }
        }

        foreach my $attr ( keys %{$conf->{'attributes'}} )
        {
            if ( $line =~ /.*$attr\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(\d+)/ )
            {
                push @metrics, { 'Tags' => { 'disk' => $disk, 'attribute' => $attr }, 'Value' => $1 + 0};
         
                if ( $conf->{'attributes'}->{$attr}->{'warn'} and $1 > $conf->{'attributes'}->{$attr}->{'warn'} )
                {
                    $return->{'Status'} = 250 if $return->{'Status'} < 250;
                }
             
                if ( $conf->{'attributes'}->{$attr}->{'warn'} and $1 > $conf->{'attributes'}->{$attr}->{'crit'} )
                {
                    $return->{'Status'} = 300 if $return->{'Status'} < 300;
                }
            }
        }

        if ( $line =~ /self-assessment test result: (\w+)/ )
        {
	    $return->{'Message'} .= "/dev/$disk : $1 ";
            $details->{$disk}{'self-assessment test'} = $1;
            if ( $1 ne 'PASSED')
            {
                $return->{'Status'} = 350;
            }
        }
    }
}

$return->{'Detail'}     = $details;
$return->{'Metrics'}    = \@metrics;

print $coder->encode( $return );

